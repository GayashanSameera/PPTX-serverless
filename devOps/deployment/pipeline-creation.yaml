AWSTemplateFormatVersion: "2010-09-09"
Description: "create PPTX generation service pipeline"
Resources:
    #start policy creation
    AWSCodePipelineServicePolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-pptx-generator"
            Path: "/service-role/"
            PolicyDocument: |
                {
                    "Statement": [
                        {
                            "Action": [
                                "iam:PassRole"
                            ],
                            "Resource": "*",
                            "Effect": "Allow",
                            "Condition": {
                                "StringEqualsIfExists": {
                                    "iam:PassedToService": [
                                        "cloudformation.amazonaws.com",
                                        "elasticbeanstalk.amazonaws.com",
                                        "ec2.amazonaws.com",
                                        "ecs-tasks.amazonaws.com"
                                    ]
                                }
                            }
                        },
                        {
                            "Action": [
                                "codecommit:CancelUploadArchive",
                                "codecommit:GetBranch",
                                "codecommit:GetCommit",
                                "codecommit:GetUploadArchiveStatus",
                                "codecommit:UploadArchive"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codedeploy:CreateDeployment",
                                "codedeploy:GetApplication",
                                "codedeploy:GetApplicationRevision",
                                "codedeploy:GetDeployment",
                                "codedeploy:GetDeploymentConfig",
                                "codedeploy:RegisterApplicationRevision"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codestar-connections:UseConnection"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "elasticbeanstalk:*",
                                "ec2:*",
                                "elasticloadbalancing:*",
                                "autoscaling:*",
                                "cloudwatch:*",
                                "s3:*",
                                "sns:*",
                                "cloudformation:*",
                                "rds:*",
                                "sqs:*",
                                "ecs:*"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "lambda:InvokeFunction",
                                "lambda:ListFunctions"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "opsworks:CreateDeployment",
                                "opsworks:DescribeApps",
                                "opsworks:DescribeCommands",
                                "opsworks:DescribeDeployments",
                                "opsworks:DescribeInstances",
                                "opsworks:DescribeStacks",
                                "opsworks:UpdateApp",
                                "opsworks:UpdateStack"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "cloudformation:CreateStack",
                                "cloudformation:DeleteStack",
                                "cloudformation:DescribeStacks",
                                "cloudformation:UpdateStack",
                                "cloudformation:CreateChangeSet",
                                "cloudformation:DeleteChangeSet",
                                "cloudformation:DescribeChangeSet",
                                "cloudformation:ExecuteChangeSet",
                                "cloudformation:SetStackPolicy",
                                "cloudformation:ValidateTemplate"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Action": [
                                "codebuild:BatchGetBuilds",
                                "codebuild:StartBuild"
                            ],
                            "Resource": "*",
                            "Effect": "Allow"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "devicefarm:ListProjects",
                                "devicefarm:ListDevicePools",
                                "devicefarm:GetRun",
                                "devicefarm:GetUpload",
                                "devicefarm:CreateUpload",
                                "devicefarm:ScheduleRun"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "servicecatalog:ListProvisioningArtifacts",
                                "servicecatalog:CreateProvisioningArtifact",
                                "servicecatalog:DescribeProvisioningArtifact",
                                "servicecatalog:DeleteProvisioningArtifact",
                                "servicecatalog:UpdateProduct"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "cloudformation:ValidateTemplate"
                            ],
                            "Resource": "*"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "ecr:DescribeImages"
                            ],
                            "Resource": "*"
                        }
                    ],
                    "Version": "2012-10-17"
                }

    CodeBuildCloudWatchLogsPolicyPPTXGenerator:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildCloudWatchLogsPolicy-tpip-pptx-generator-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:tpip_pptx_generator",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:tpip_pptx_generator:*"
                            ],
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ]
                        }
                    ]
                }

    CodeBuildCloudWatchLogsPolicyPayloadCreator:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildCloudWatchLogsPolicy-tpip-payload-creator-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:tpip_payload_creator",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:tpip_payload_creator:*"
                            ],
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ]
                        }
                    ]
                }

    CodeBuildBasePolicyPPTXGenerator:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildBasePolicy-tpip-pptx-generator-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/tpip-pptx-generator",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/tpip-pptx-generator:*"
                            ],
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                            ],
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codebuild:CreateReportGroup",
                                "codebuild:CreateReport",
                                "codebuild:UpdateReport",
                                "codebuild:BatchPutTestCases"
                            ],
                            "Resource": [
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/tpip-pptx-generator-*"
                            ]
                        }
                    ]
                }
    
    CodeBuildBasePolicyPayloadCreator:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "CodeBuildBasePolicy-tpip-payload-creator-${AWS::Region}"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/tpip-payload-creator",
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/tpip-payload-creator:*"
                            ],
                            "Action": [
                                "logs:CreateLogGroup",
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                            ],
                            "Action": [
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:GetObjectVersion",
                                "s3:GetBucketAcl",
                                "s3:GetBucketLocation"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codebuild:CreateReportGroup",
                                "codebuild:CreateReport",
                                "codebuild:UpdateReport",
                                "codebuild:BatchPutTestCases"
                            ],
                            "Resource": [
                                "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/tpip-payload-creator-*"
                            ]
                        }
                    ]
                }
    #end policy creation

    #start role creation

    # if we need to create some resource after created another one we can use DependsOn key
    # and need to set dependent resource name

    AWSCodePipelineServiceRole:
        Type: "AWS::IAM::Role"
        DependsOn:
          - AWSCodePipelineServicePolicy
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "AWSCodePipelineServiceRole-${AWS::Region}-pptx-generator"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codepipeline.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AdministratorAccess"
              - !Ref 'AWSCodePipelineServicePolicy'

    CodebuildPPTXGeneratorRole:
        Type: "AWS::IAM::Role"
        DependsOn:
          - CodeBuildCloudWatchLogsPolicyPPTXGenerator
          - CodeBuildBasePolicyPPTXGenerator
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "codebuild-tpip-pptx-generator-service-${AWS::Region}-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AdministratorAccess"
              - !Ref "CodeBuildCloudWatchLogsPolicyPPTXGenerator"
              - !Ref "CodeBuildBasePolicyPPTXGenerator"

    CodebuildPayloadCreatorRole:
        Type: "AWS::IAM::Role"
        DependsOn:
          - CodeBuildCloudWatchLogsPolicyPayloadCreator
          - CodeBuildBasePolicyPayloadCreator
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "codebuild-tpip-payload-creator-service-${AWS::Region}-role"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"codebuild.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/AdministratorAccess"
              - !Ref "CodeBuildCloudWatchLogsPolicyPayloadCreator"
              - !Ref "CodeBuildBasePolicyPayloadCreator"
    #end role creation
    
    #start codeBuild creation

    # need to set ServiceRole correctly, refer role that created to codeBuild service
    CodeBuildPPTXGenerator:
        Type: "AWS::CodeBuild::Project"
        DependsOn:
          - CodebuildPPTXGeneratorRole
        Properties:
            Name: "tpip-pptx-generator"
            Source: 
                BuildSpec: "devOps/dev/devops_dev_generator.yml"
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: "tpip-pptx_generator"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                Image: "aws/codebuild/standard:5.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/codebuild-tpip-pptx-generator-service-${AWS::Region}-role"
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
            BadgeEnabled: false
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "ENABLED"
                    GroupName: "tpip_pptx_generator"
                S3Logs: 
                    Status: "DISABLED"
                    EncryptionDisabled: false

    CodeBuildPayloadCreator:
        Type: "AWS::CodeBuild::Project"
        DependsOn:
          - CodebuildPayloadCreatorRole
        Properties:
            Name: "tpip-payload-creator"
            Source: 
                BuildSpec: "devOps/dev/devops_dev_payload.yml"
                InsecureSsl: false
                Type: "CODEPIPELINE"
            Artifacts: 
                EncryptionDisabled: false
                Name: "tpip-payload_creator"
                Packaging: "NONE"
                Type: "CODEPIPELINE"
            Cache: 
                Type: "NO_CACHE"
            Environment: 
                ComputeType: "BUILD_GENERAL1_SMALL"
                Image: "aws/codebuild/standard:5.0"
                ImagePullCredentialsType: "CODEBUILD"
                PrivilegedMode: false
                Type: "LINUX_CONTAINER"
            ServiceRole: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/codebuild-tpip-payload-creator-service-${AWS::Region}-role"
            TimeoutInMinutes: 60
            QueuedTimeoutInMinutes: 480
            EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
            BadgeEnabled: false
            LogsConfig: 
                CloudWatchLogs: 
                    Status: "ENABLED"
                    GroupName: "tpip_payload_creator"
                S3Logs: 
                    Status: "DISABLED"
                    EncryptionDisabled: false

    #end codeBuild creation

    #start s3 bucket creation

    #this is for upload pipeline stack
    #we can use any name
    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: !Sub "codepipeline-${AWS::Region}-pptx-generator-v1-15052022"
    #end s3 bucket creation

    #start pipeline creation
    # Generate token like this:
    # GH Link: https://github.com/settings/tokens

    CodePipelinePipeline:
        Type: "AWS::CodePipeline::Pipeline"
        DependsOn:
          - AWSCodePipelineServiceRole
          - S3Bucket
        Properties:
            Name: "venus-backend"
            RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/AWSCodePipelineServiceRole-${AWS::Region}-pptx-generator"
            ArtifactStore: 
                Location: !Ref "S3Bucket"
                Type: "S3"
            Stages: 
              - 
                Name: "Source"
                Actions: 
                  - 
                    Name: "Source"
                    ActionTypeId: 
                        Category: "Source"
                        Owner: "ThirdParty"
                        Provider: "GitHub"
                        Version: "1"
                    Configuration: 
                        Branch: "dev"
                        OAuthToken: "{{resolve:secretsmanager:GitHubPersonalAccessToken:SecretString:GitHubPersonalAccessToken::}}"
                        Owner: "tpip-developer"  #change
                        PollForSourceChanges: "false"
                        Repo: "venus" #change
                    OutputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "SourceVariables"
                    RunOrder: 1

              - 
                Name: "Manual Approval"
                Actions: 
                  - 
                    Name: "Manual Approval"
                    ActionTypeId: 
                        Category: "Approval"
                        Owner: "AWS"
                        Provider: "Manual"
                        Version: "1"
                    RunOrder: 1

              - 
                Name: "pptx-generator-service"
                Actions: 
                  - 
                    Name: "pptx-generator-service"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: "tpip-pptx-generator"
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "pptx-generator-service"
                    RunOrder: 1

              - 
                Name: "pptx-payload-creator-service"
                Actions: 
                  - 
                    Name: "pptx-payload-creator-service"
                    ActionTypeId: 
                        Category: "Build"
                        Owner: "AWS"
                        Provider: "CodeBuild"
                        Version: "1"
                    Configuration: 
                        ProjectName: "tpip-payload-creator"
                    InputArtifacts: 
                      - 
                        Name: "SourceArtifact"
                    Region: !Ref AWS::Region
                    Namespace: "pptx-payload-creator-service"
                    RunOrder: 1

#end pipeline creation
    


